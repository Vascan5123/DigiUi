











  /* override(IndexPage.prototype, '', function () {
  }); */
  /* extend(IndexPage.prototype, 'view', function (view) {
    view.children[1].children[0].children[0].attrs.className = "IndexPage-nav sideNav openMenu_class"
  }); */





  




  // Adding menu button
  /* override(Navigation.prototype, 'view', function () {
    const { history, pane } = app;
    return (
      <div
        className={'Navigation ButtonGroup ' + (this.attrs.className || '')}
        onmouseenter={pane && pane.show.bind(pane)}
        onmouseleave={pane && pane.onmouseleave.bind(pane)}
      >
        {history.canGoBack() ? [this.getBackButton(), this.getPaneButton()] : [getMenuButton(), this.getDrawerButton()]}
      </div>
    );
  }); */
  // This is Menu button
  /* function getMenuButton() {
    if (!app.current.matches(UserPage)) {
      return (
        <a id="menu_open_id" class="Button Button--icon hasIcon" title="Menu" active="false" type="button" onclick={menuOn.bind(this)}>
          <i class="fas fa-bars Button-icon"></i>
        </a>
      );
    }
  } */
  function menuOn() {
    let nav = document.getElementsByClassName("IndexPage-nav")[0];
    if (nav.classList.contains('openMenu_class')) {
      nav.classList.remove("openMenu_class");
    } else {
      nav.classList.add("openMenu_class");
    }
  }







  extend(ComposerBody.prototype, 'view', function (view) {
    /* console.log(view.children[0].children) */
    /* view.children[0].children.shift() */
  });










  
  override(IndexPage.prototype, 'view', function () {
    function sidebarItems2() {
      const items = new ItemList();
      const canStartDiscussion = app.forum.attribute('canStartDiscussion') || !app.session.user;

      items.add(
        'newDiscussion',
        Button.component(
          {
            icon: 'fas fa-edit',
            className: 'Button Button--primary IndexPage-newDiscussion',
            itemClassName: 'App-primaryControl',
            onclick: () => {
              // If the user is not logged in, the promise rejects, and a login modal shows up.
              // Since that's already handled, we dont need to show an error message in the console.
              return this.newDiscussionAction().catch(() => { });
            },
            disabled: !canStartDiscussion,
          },
          app.translator.trans(canStartDiscussion ? 'core.forum.index.start_discussion_button' : 'core.forum.index.cannot_start_discussion_button')
        )
      );

      items.add(
        'allDiscussions',
        LinkButton.component(
          {
            href: app.route('index'),
            icon: 'far fa-comments',
          },
          app.translator.trans('core.forum.index.all_discussions_link')
        ),
        100
      );



      extend(IndexPage.prototype, 'sidebarItems', function (sidebarItems) {
        console.log(sidebarItems.items.nav.content)
      });
      return items;
    }
    return (
      <div className="IndexPage">
        {this.hero()}
        <div className="container">
          <div className="sideNavContainer">
            <nav className="IndexPage-nav sideNav">
              <ul>{listItems(this.sidebarItems().toArray())}</ul>
            </nav>
            <nav className="IndexPage-nav2 sideNav">
              <ul>{listItems(sidebarItems2().toArray())}</ul>
            </nav>
            <div className="IndexPage-results sideNavOffset">
              <div className="IndexPage-toolbar">
                <ul className="IndexPage-toolbar-view">{listItems(this.viewItems().toArray())}</ul>
                <ul className="IndexPage-toolbar-action">{listItems(this.actionItems().toArray())}</ul>
              </div>
              <DiscussionList state={app.discussions} />
            </div>
          </div>
        </div>
      </div>
    );



    // Убераем левое меню
    /* if (items.has('newDiscussion')) {
      items.remove('newDiscussion');
    }
    if (items.has('nav')) {
      items.remove('nav');
    } */
  });



  
      extend(IndexPage.prototype, 'sidebarItems', function (sidebarItems) {
        let key = false;
        let i = 0;
        while (!key) {
          if (!sidebarItems.items.nav.content.children[i].key) {
            console.log("ggg")
          } else {
            key = true;
          }
          i++;
        }
      });





  /* override(ComposerBody.prototype, 'view', function () {
    return (
      <div className={'ComposerBody ' + (this.attrs.className || '')}>
        <div className="ComposerBody-content">
          <ul className="ComposerBody-header">{listItems(this.headerItems().toArray())}</ul>
          <div className="ComposerBody-editor">
            {TextEditor.component({
              class1: "textarea_create_post",
              submitLabel: this.attrs.submitLabel,
              placeholder: "",
              disabled: this.loading || this.attrs.disabled,
              composer: this.composer,
              preview: this.jumpToPreview && this.jumpToPreview.bind(this),
              onchange: this.composer.fields.content,
              onsubmit: this.onsubmit.bind(this),
              value: this.composer.fields.content(),
            })}
          </div>
        </div>
        {LoadingIndicator.component({ className: 'ComposerBody-loading' + (this.loading ? ' active' : '') })}
      </div>
    );
  }) */







        /* let all_images = document.getElementsByClassName("PostStream-item")[0]
        if (all_images != undefined) {
            all_images = document.getElementsByClassName("PostStream-item")[0].getElementsByClassName("Post-body")[0].getElementsByTagName("p")[0].getElementsByTagName("img");
            if (all_images.length < 1) {
                document.getElementById("Button_text_imagini").classList.add("disabled")
            }
        } */

        /* let all_transliterat = document.getElementsByClassName("PostStream-item")[0]
        if (all_transliterat != undefined) {
            all_transliterat = document.getElementsByClassName("PostStream-item")[0].getElementsByClassName("Post-body")[0].getElementsByTagName("p")[0].getElementsByTagName("span");
            if (all_transliterat.length < 1) {
                document.getElementById("Button_text_transliterat").classList.add("disabled")
            }
            for (let i = 0; i < all_transliterat.length; i++) {
                if (!all_transliterat[i].classList.contains('transliterat')) {
                    if (all_transliterat.length < 1) {
                        document.getElementById("Button_text_transliterat").classList.add("disabled")
                    }
                }
            }
        } */

        /* let all_chirilic = document.getElementsByClassName("PostStream-item")[0]
        if (all_chirilic != undefined) {
            all_chirilic = document.getElementsByClassName("PostStream-item")[0].getElementsByClassName("Post-body")[0].getElementsByTagName("p")[0].getElementsByTagName("span");
            if (all_chirilic.length < 1) {
                document.getElementById("Button_text_chirilica").classList.add("disabled")
            }
            for (let i = 0; i < all_chirilic.length; i++) {
                if (!all_chirilic[i].classList.contains('chirilic')) {
                    if (all_chirilic.length < 1) {
                        document.getElementById("Button_text_chirilica").classList.add("disabled")
                    }
                }
            }
        } */













              {/* <div class="fileManager_open_2" onclick={fileManagerButtonClicked2.bind(this)}>
                <span id="fileManager_open_id">
                  <i class="icon fas fa-folder-open"></i>
                </span>
                <span class="fileManager_text">Adaugă fișiere</span>
              </div> */
              /* onchange: console.log(this.composer.fields.content()), */}








override(require('@fof-upload').components.FileManagerModal.prototype, 'onUpload', function (original) {


    return ""
  });
  function fileManagerButtonClicked2() {
    app.modal.show(require('@fof-upload').components.FileManagerModal, {

      uploader: TextEditor.prototype.uploader,
    });


    /* extend(TextEditor.prototype, 'oninit', function () {
      this.uploader = new Uploader();
  }); */
    /* require('@fof-upload').components.FileManagerButton.prototype.fileManagerButtonClicked.bind(this) */
    /* require('@fof-upload').components.FileManagerButton.prototype.fileManagerButtonClicked.bind(this) */
    /* override(require('@fof-upload').components.FileManagerButton.prototype, 'view', function (original) {
      this.fileManagerButtonClicked()
      return Button.component({
        className: 'Button fof-upload-button Button--icon',
        onload: this.fileManagerButtonClicked.bind(this),
        icon: 'fas fa-folder-open',
        title: app.translator.trans('fof-upload.forum.buttons.media'),
      })
    }); */
  }